{"version":3,"file":"static/js/453.33cb3e36.chunk.js","mappings":"iNAMMA,GAAQC,EAAAA,EAAAA,KAEC,SAASC,IACtB,OACE,SAAC,IAAD,CAAeF,MAAOA,EAAtB,UACI,SAAC,IAAD,CAAYG,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAASC,WAAW,OAAOC,MAAO,CAAEC,UAAU,QAA5F,uHAKP,C,mGCfD,EADoC,oBAAXC,QAAyBA,OAAOC,IAC9BD,OAAOC,IAAI,cAAgB,mB,SC2EtD,MA5CA,SAAuBC,GACrB,IACEC,EAEED,EAFFC,SACOC,EACLF,EADFX,MAEIc,GAAaC,EAAAA,EAAAA,KAQbf,EAAQgB,EAAAA,SAAc,WAC1B,IAAMC,EAAwB,OAAfH,EAAsBD,EApCzC,SAA8BC,EAAYD,GACxC,MAA0B,oBAAfA,EACWA,EAAWC,IAW1BI,EAAAA,EAAAA,GAAS,CAAC,EAAGJ,EAAYD,EACjC,CAsBqDM,CAAqBL,EAAYD,GAMnF,OAJc,MAAVI,IACFA,EAAOG,GAAyB,OAAfN,GAGZG,CACR,GAAE,CAACJ,EAAYC,IAChB,OAAoBO,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,SAAuB,CAC9CC,MAAOvB,EACPY,SAAUA,GAEb,E,oBClDD,SAASY,EAAmBb,GAC1B,IAAMX,GAAQe,EAAAA,EAAAA,KACd,OAAoBM,EAAAA,EAAAA,KAAKI,EAAAA,EAAAA,SAAmC,CAC1DF,MAAwB,kBAAVvB,EAAqBA,EAAQ,CAAC,EAC5CY,SAAUD,EAAMC,UAEnB,CAiDD,MApCA,SAAuBD,GACrB,IACEC,EAEED,EAFFC,SACOC,EACLF,EADFX,MAEF,OAAoBqB,EAAAA,EAAAA,KAAKK,EAAkB,CACzC1B,MAAOa,EACPD,UAAuBS,EAAAA,EAAAA,KAAKG,EAAoB,CAC9CZ,SAAUA,KAGf,C","sources":["pages/404.tsx","../node_modules/@mui/private-theming/ThemeProvider/nested.js","../node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js","../node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js"],"sourcesContent":["import React from 'react';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n\nconst theme = createTheme();\n\nexport default function NotFound() {\n  return (\n    <ThemeProvider theme={theme}>\n        <Typography component=\"h1\" variant=\"h5\" align='center' fontWeight='bold' style={{ marginTop:'30px'}}>\n            Страница не найдена\n        </Typography>\n    </ThemeProvider>\n  );\n}","const hasSymbol = typeof Symbol === 'function' && Symbol.for;\nexport default hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    const mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  const outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  const theme = React.useMemo(() => {\n    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/_jsx(ThemeContext.Provider, {\n    value: theme,\n    children: children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useTheme from '../useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction InnerThemeProvider(props) {\n  const theme = useTheme();\n  return /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n    value: typeof theme === 'object' ? theme : {},\n    children: props.children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? InnerThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node\n} : void 0;\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n */\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: localTheme,\n    children: /*#__PURE__*/_jsx(InnerThemeProvider, {\n      children: children\n    })\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;"],"names":["theme","createTheme","NotFound","component","variant","align","fontWeight","style","marginTop","Symbol","for","props","children","localTheme","outerTheme","useTheme","React","output","_extends","mergeOuterLocalTheme","nested","_jsx","ThemeContext","value","InnerThemeProvider","StyledEngineThemeContext","MuiThemeProvider"],"sourceRoot":""}